#pragma config(Sensor, in1,    line1,          sensorLineFollower)
#pragma config(Sensor, in2,    line2,          sensorLineFollower)
#pragma config(Sensor, dgtl1,  limit,          sensorTouch)
#pragma config(Sensor, dgtl2,  bump,           sensorTouch)
#pragma config(Motor,  port2,           motor1,        tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port3,           motor2,        tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port4,           motor3,        tmotorServoStandard, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task main()
{
// motor1 is motor for cutting
// motor2 is motor for chain drive
// motor3 is motor for conveyor

// line1 is start
// line2 is stop

while(true) { // makes program go forever

    // Check if the bump switch is pressed
    if(SensorValue[bump] == 1) {
        // If the bump switch is pressed, stop all motors
        motor[motor1] = 0;
        motor[motor2] = 0;
        motor[motor3] = 0;
        // Wait until the bump switch is released
        while(SensorValue[bump] == 1) {
            wait1Msec(10); // Small delay to prevent busy waiting
        }
    }

    motor[motor3] = 19; // turn motor on

    waitUntil(SensorValue[line2] < 1900); // wait until line2 is covered

    motor[motor3] = 0; // turn the motor for conveyor off
    motor[motor1] = 25; // turn the motor for cutting on

    wait1Msec(2000); // turn for 2 seconds
    motor[motor2] = 15; // turn motor for chain drive on
    waitUntil(SensorValue[limit] == 1); // wait until the limit is pressed with cutting shaft

    motor[motor1] = 0; // motor for cutting off
    motor[motor3] = 19; // conveyor motor on again
    wait1Msec(4000);
    motor[motor3] = 0;

    // After each step, check if the bump switch is pressed and handle it accordingly
    if(SensorValue[bump] == 1) {
        motor[motor1] = 0;
        motor[motor2] = 0;
        motor[motor3] = 0;
        while(SensorValue[bump] == 1) {
            wait1Msec(10);
        }
    }
}
}
